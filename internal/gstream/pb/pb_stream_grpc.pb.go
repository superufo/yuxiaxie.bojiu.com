// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: pb/pb_stream.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForwardMsgClient is the client API for ForwardMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForwardMsgClient interface {
	//双向流模式，能推能拉
	PPStream(ctx context.Context, opts ...grpc.CallOption) (ForwardMsg_PPStreamClient, error)
}

type forwardMsgClient struct {
	cc grpc.ClientConnInterface
}

func NewForwardMsgClient(cc grpc.ClientConnInterface) ForwardMsgClient {
	return &forwardMsgClient{cc}
}

func (c *forwardMsgClient) PPStream(ctx context.Context, opts ...grpc.CallOption) (ForwardMsg_PPStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ForwardMsg_ServiceDesc.Streams[0], "/ForwardMsg/PPStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &forwardMsgPPStreamClient{stream}
	return x, nil
}

type ForwardMsg_PPStreamClient interface {
	Send(*StreamRequestData) error
	Recv() (*StreamResponseData, error)
	grpc.ClientStream
}

type forwardMsgPPStreamClient struct {
	grpc.ClientStream
}

func (x *forwardMsgPPStreamClient) Send(m *StreamRequestData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *forwardMsgPPStreamClient) Recv() (*StreamResponseData, error) {
	m := new(StreamResponseData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ForwardMsgServer is the server API for ForwardMsg service.
// All implementations must embed UnimplementedForwardMsgServer
// for forward compatibility
type ForwardMsgServer interface {
	//双向流模式，能推能拉
	PPStream(ForwardMsg_PPStreamServer) error
	//mustEmbedUnimplementedForwardMsgServer()
}

// UnimplementedForwardMsgServer must be embedded to have forward compatible implementations.
type UnimplementedForwardMsgServer struct {
}

func (UnimplementedForwardMsgServer) PPStream(ForwardMsg_PPStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PPStream not implemented")
}
func (UnimplementedForwardMsgServer) mustEmbedUnimplementedForwardMsgServer() {}

// UnsafeForwardMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForwardMsgServer will
// result in compilation errors.
type UnsafeForwardMsgServer interface {
	mustEmbedUnimplementedForwardMsgServer()
}

func RegisterForwardMsgServer(s grpc.ServiceRegistrar, srv ForwardMsgServer) {
	s.RegisterService(&ForwardMsg_ServiceDesc, srv)
}

func _ForwardMsg_PPStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ForwardMsgServer).PPStream(&forwardMsgPPStreamServer{stream})
}

type ForwardMsg_PPStreamServer interface {
	Send(*StreamResponseData) error
	Recv() (*StreamRequestData, error)
	grpc.ServerStream
}

type forwardMsgPPStreamServer struct {
	grpc.ServerStream
}

func (x *forwardMsgPPStreamServer) Send(m *StreamResponseData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *forwardMsgPPStreamServer) Recv() (*StreamRequestData, error) {
	m := new(StreamRequestData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ForwardMsg_ServiceDesc is the grpc.ServiceDesc for ForwardMsg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForwardMsg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ForwardMsg",
	HandlerType: (*ForwardMsgServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PPStream",
			Handler:       _ForwardMsg_PPStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/pb_stream.proto",
}
