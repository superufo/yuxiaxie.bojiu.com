// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: pb_center.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	//结算变更库存
	SendSettlement(ctx context.Context, in *GameSettlementTos, opts ...grpc.CallOption) (*ProbabilityRewardToc, error)
	//获取玩家信息
	GetUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	//获取玩家控制状态以及当前库存和配置
	GetStorageInfo(ctx context.Context, in *StorageReq, opts ...grpc.CallOption) (*StorageCtrl, error)
	//预减少余额，看能不能扣掉
	SupposeReduce(ctx context.Context, in *SupposeReduceReq, opts ...grpc.CallOption) (*Response, error)
	//减少余额
	ReduceBalance(ctx context.Context, in *ChangeBalanceReq, opts ...grpc.CallOption) (*ChangeBalanceResp, error)
	//增加余额
	AddBalance(ctx context.Context, in *ChangeBalanceReq, opts ...grpc.CallOption) (*ChangeBalanceResp, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) SendSettlement(ctx context.Context, in *GameSettlementTos, opts ...grpc.CallOption) (*ProbabilityRewardToc, error) {
	out := new(ProbabilityRewardToc)
	err := c.cc.Invoke(ctx, "/storage/send_settlement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/storage/get_user_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetStorageInfo(ctx context.Context, in *StorageReq, opts ...grpc.CallOption) (*StorageCtrl, error) {
	out := new(StorageCtrl)
	err := c.cc.Invoke(ctx, "/storage/get_storage_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) SupposeReduce(ctx context.Context, in *SupposeReduceReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/storage/suppose_reduce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ReduceBalance(ctx context.Context, in *ChangeBalanceReq, opts ...grpc.CallOption) (*ChangeBalanceResp, error) {
	out := new(ChangeBalanceResp)
	err := c.cc.Invoke(ctx, "/storage/reduce_balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) AddBalance(ctx context.Context, in *ChangeBalanceReq, opts ...grpc.CallOption) (*ChangeBalanceResp, error) {
	out := new(ChangeBalanceResp)
	err := c.cc.Invoke(ctx, "/storage/add_balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations should embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	//结算变更库存
	SendSettlement(context.Context, *GameSettlementTos) (*ProbabilityRewardToc, error)
	//获取玩家信息
	GetUserInfo(context.Context, *UserRequest) (*UserInfoResponse, error)
	//获取玩家控制状态以及当前库存和配置
	GetStorageInfo(context.Context, *StorageReq) (*StorageCtrl, error)
	//预减少余额，看能不能扣掉
	SupposeReduce(context.Context, *SupposeReduceReq) (*Response, error)
	//减少余额
	ReduceBalance(context.Context, *ChangeBalanceReq) (*ChangeBalanceResp, error)
	//增加余额
	AddBalance(context.Context, *ChangeBalanceReq) (*ChangeBalanceResp, error)
}

// UnimplementedStorageServer should be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) SendSettlement(context.Context, *GameSettlementTos) (*ProbabilityRewardToc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSettlement not implemented")
}
func (UnimplementedStorageServer) GetUserInfo(context.Context, *UserRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedStorageServer) GetStorageInfo(context.Context, *StorageReq) (*StorageCtrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageInfo not implemented")
}
func (UnimplementedStorageServer) SupposeReduce(context.Context, *SupposeReduceReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupposeReduce not implemented")
}
func (UnimplementedStorageServer) ReduceBalance(context.Context, *ChangeBalanceReq) (*ChangeBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceBalance not implemented")
}
func (UnimplementedStorageServer) AddBalance(context.Context, *ChangeBalanceReq) (*ChangeBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBalance not implemented")
}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_SendSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSettlementTos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).SendSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage/send_settlement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).SendSettlement(ctx, req.(*GameSettlementTos))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage/get_user_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetUserInfo(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetStorageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetStorageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage/get_storage_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetStorageInfo(ctx, req.(*StorageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_SupposeReduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupposeReduceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).SupposeReduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage/suppose_reduce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).SupposeReduce(ctx, req.(*SupposeReduceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ReduceBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ReduceBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage/reduce_balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ReduceBalance(ctx, req.(*ChangeBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_AddBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).AddBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage/add_balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).AddBalance(ctx, req.(*ChangeBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "send_settlement",
			Handler:    _Storage_SendSettlement_Handler,
		},
		{
			MethodName: "get_user_info",
			Handler:    _Storage_GetUserInfo_Handler,
		},
		{
			MethodName: "get_storage_info",
			Handler:    _Storage_GetStorageInfo_Handler,
		},
		{
			MethodName: "suppose_reduce",
			Handler:    _Storage_SupposeReduce_Handler,
		},
		{
			MethodName: "reduce_balance",
			Handler:    _Storage_ReduceBalance_Handler,
		},
		{
			MethodName: "add_balance",
			Handler:    _Storage_AddBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_center.proto",
}
